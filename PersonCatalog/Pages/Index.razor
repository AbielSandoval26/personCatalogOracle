@page "/"
@using PersonCatalog.Model
@using PersonCatalog.Services
@using System.Reflection
@inject PersonService PersonService

<h3>Lista de Personas</h3>

@if (persons == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                @foreach (var property in propertyPerson)
                {
                    <th>@property</th>
                }
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var persona in persons)
            {
                <tr>
                    <td>@persona.Nombre</td>
                    <td>@persona.Apellido</td>
                    <td>@persona.Email</td>
                    <td>@persona.Direccion</td>
                    <button class="btn btn-warning" style="background-color:yellow; margin-right:03px;" @onclick="() => EditPerson(persona)">Editar</button>
                    <button class="btn btn-danger" style="background-color:red" @onclick="() => DeletePerson(persona.Id)">Eliminar</button>
                </tr>
            }
        </tbody>
    </table>

}

<h3>@(isEditing ? "Editar Persona" : "Agregar Persona")</h3>

<EditForm Model="currentPerson" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <div class="form-group row">
        <label class="col-sm-2 col-form-label text-end mb-2" for="nombre">Nombre:</label>
        <div class="col-sm-6">
            <InputText class="form-control" id="nombre" @bind-Value="currentPerson.Nombre" />
            <ValidationMessage For="@(() => currentPerson.Nombre)" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label text-end mb-2" for="apellido">Apellido:</label>
        <div class="col-sm-6">
            <InputText class="form-control" id="apellido" @bind-Value="currentPerson.Apellido" />
            <ValidationMessage For="@(() => currentPerson.Apellido)" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label text-end mb-2" for="email">Email:</label>
        <div class="col-sm-6">
            <InputText class="form-control" id="email" @bind-Value="currentPerson.Email" />
            <ValidationMessage For="@(() => currentPerson.Email)" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label text-end mb-2" for="direccion">Direccion:</label>
        <div class="col-sm-6">
            <InputText class="form-control" id="direccion" @bind-Value="currentPerson.Direccion" />
            <ValidationMessage For="@(() => currentPerson.Direccion)" />
        </div>
    </div>
  
    <button class="btn btn-success mt-4 mb-4" type="submit">@((isEditing ? "Actualizar" : "Agregar"))</button>
    <button class="btn btn-primary mt-4 mb-4" type="button" @onclick="CancelEdit">Cancelar</button>
</EditForm>


@code{
    private List<Person> persons;
    private Person currentPerson = new Person();
    private bool isEditing = false;
    private List<string> propertyPerson;

    protected override async Task OnInitializedAsync()
    {
        propertyPerson = new List<string>();
        PropertyInfo[] properties = typeof(Person).GetProperties();
        for (int i = 1; i < properties.Length; i++)
            propertyPerson.Add(properties[i].Name);

        await LoadPersons();
    }

    private async Task LoadPersons()
    {
        persons = await PersonService.GetPersonsAsync();
    }

    private void EditPerson(Person person)
    {
        currentPerson = person;
        isEditing = true;
    }

    private async Task DeletePerson(int id)
    {
        await PersonService.DeletePerson(id);
        await LoadPersons();
        
    }

    private async Task HandleValidSubmit()
    {

        if (isEditing)
        {
            await PersonService.UpdatePerson(currentPerson);
        }
        else
        {
            await PersonService.AddPerson(currentPerson);
        }

        await LoadPersons();
        CancelEdit();
    }

    private void CancelEdit()
    {
        currentPerson = new Person();
        isEditing = false;
    }
}
